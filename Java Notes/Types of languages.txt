Types of languages
Procedural
Functional
Object Oriented

Procedural
- specifies a series of well-structured steps and procedures to compose a program.
- Contains a systematic order of statements, Functions and commands to complete a task.

Functional
- Writing a program only in pure functions i.e. never modify variables, but only create new ones as an output.
- Used in situations where we have to perform lots of different operations on the same set of data, like ML.
- First class functions?

Object Oriented
- Revolves around objects
- Code + Data = Object
- Developed to make it easier to develop, debug, reuse, and maintain software.

Static vs Dynamic Languages

Static: 
- Perform type checking at compile time 
- Errors will show at compile time
- Declare datatype before you use it 
- More control

Dynamic:
- Perform type checking at runtime
- Error might not show till program is run
- No need to declare datatype of variables
- Saves time in writing code but might give error at runtime

Stack Memory

1.Stores local variables, method call details, and function parameters.
2.Memory allocation is static (done at compile-time).
3.Faster access compared to heap.
4.Size is smaller and limited (a few MBs).
5.Memory is automatically managed (created when method starts, destroyed when method ends).
6.Follows LIFO (Last In First Out) structure.
7.Cannot be resized at runtime.
8.Error type: Stack Overflow (e.g., deep recursion).
9.Data is short-lived (exists only during method execution).
10.No memory fragmentation.


Heap Memory

1.Stores objects, arrays, and reference types.
2.Memory allocation is dynamic (done at runtime).
3.Slower access compared to stack.
4.Size is larger (can be GBs, depends on system).
5.Managed manually (C/C++) or by Garbage Collector (Java/Python).
6.Does not follow LIFO, memory allocated anywhere in free space.
7.Can be resized at runtime.
8.Error types: Memory Leak or Out of Memory.
9.Data is long-lived (exists until explicitly freed or GC removes it).
10.Can suffer from fragmentation.

Stack â†’ Fast, Small, Short-lived, Auto-managed.
Heap â†’ Large, Slower, Long-lived, Needs GC/manual free.

ðŸ¥ž Stack (like a plate stack in a cafeteria)
	â€¢You always put the new plate on top and remove the top one first (LIFO).
	â€¢Fast and organised, but limited in height (small size).
	â€¢Once you take a plate out, itâ€™s gone automatically (auto memory management).

â¸»

ðŸš— Heap (like a parking lot)
	â€¢Cars (objects) can be parked anywhere in the free space (not ordered).
	â€¢Slower to find a space, but can hold many cars (large size).
	â€¢A car stays until the owner takes it out (manual delete/garbage collector).
	â€¢If cars are parked badly, empty spaces remain unused (fragmentation).

â¸»

ðŸ‘‰ So in interviews:
	â€¢Stack â†’ cafeteria plate stack (fast, ordered, auto-managed)
	â€¢Heap â†’ parking lot (big, flexible, manual/GC managed)

ðŸ”¹ What is GC?

Garbage Collection (GC) is a process in programming languages like Java, C#, Python (partly) that automatically reclaims memory occupied by objects that are no longer used by the program.

Without GC, youâ€™d have to manually free memory (like in C/C++ with free()), which is error-prone and can cause memory leaks.

â¸»

ðŸ”¹ How does GC work? (Java Example)

1.Allocation in Heap
	â€¢When you create an object (new keyword in Java), it gets memory in the Heap.
2.Reachability Check
	â€¢GC checks if an object is reachable (still referenced by any variable, method, or active thread).
	â€¢If no one is pointing to it, itâ€™s considered garbage.
Example: String s = new String("Hello");
		  s = null;  // "Hello" object is now garbage

3.Mark-and-Sweep Algorithm (common approach)
	â€¢Mark phase: GC scans memory and marks objects that are reachable.
	â€¢Sweep phase: Unmarked (unreachable) objects are cleared from Heap, freeing space.
4.Generational GC (Optimization in Java)
	â€¢Heap is divided into Young Generation (new objects) and Old Generation (long-lived objects).
	â€¢Most objects die young, so GC frequently cleans Young Gen, and less often cleans Old Gen â†’ makes it 	 faster.

â¸»

ðŸ”¹ Real-World Analogy

Think of a messy parking lot (Heap):
	â€¢Cars = Objects
	â€¢If a car owner leaves and never comes back (no references), the parking staff (GC) will eventually tow 	 it away â†’ making space for new cars.

â¸»

ðŸ”¹ Key Points to Remember for Interviews
	â€¢GC runs automatically (canâ€™t force it, only request using System.gc() in Java).
	â€¢Prevents memory leaks by cleaning unused objects.
	â€¢Uses algorithms like Mark-Sweep, Copying, Generational GC.
	â€¢Can cause Stop-the-World pause when cleaning (small delay in app).