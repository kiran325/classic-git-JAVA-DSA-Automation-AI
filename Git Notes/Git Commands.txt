ðŸ”¹ Git Basics

What is Git and GitHub?
	â€¢	Git keeps track of every change you make in your project (like a timeline).
	â€¢	GitHub allows you to upload (push) your Git projects online and share with others.


Why are we using Git and GitHub?
	â€¢	To track changes in code.
	â€¢	To collaborate with teammates.
	â€¢	To rollback mistakes if something breaks.


Downloading Git
	â€¢	Install Git from: https://git-scm.com/downloads
	â€¢	Verify installation:
					git --version

Some Basic Linux Commands (needed for Git)
	â€¢	pwd â†’ print working directory (where you are).
	â€¢	ls â†’ list files.
	â€¢	cd foldername â†’ go inside a folder.
	â€¢	mkdir project â†’ create a folder.
	â€¢	rm file.txt â†’ delete file.


ðŸ”¹ Working with a Repository

Initializing a Git Repository
	1.	Create a project folder: mkdir myproject && cd myproject
	2.	Initialize Git: git init (This creates a hidden .git folder that tracks your changes.)
	

Making the First Change
	â€¢	Create a file: echo "Hello Git" > hello.txt or touch hello.txt

Staging the First Change
	â€¢	Stage (add to Gitâ€™s staging area): git add hello.txt

Committing the First Change
	â€¢	Commit = save the staged changes in Git history: git commit -m "First commit: added hello.txt"

Adding Data to Files
	â€¢	Open and edit hello.txt.
	â€¢	Stage and commit again: git add hello.txt
						git commit -m "Updated hello.txt with new content"

Removing Changes from Stage
	â€¢	To unstage a file: git reset hello.txt

Viewing the History
	â€¢	See commit history: git log --oneline


Making Few More Commits
	â€¢	Keep editing files, adding (git add) and committing (git commit).

Removing a Commit from History
	â€¢	Move back one commit: git reset --hard HEAD~1

ðŸ”¹ Stashing Changes
	â€¢	Save unfinished work without committing: git stash
	â€¢	Restore it later: git stash pop
	â€¢	Clear all stashes: git stash clear

ðŸ”¹ GitHub Basics

Creating a Repository on GitHub
	1.	Go to GitHub â†’ New Repository â†’ Name it myproject.
	2.	Copy the repo link (HTTPS or SSH).

Connecting Local Repo to GitHub: git remote add origin https://github.com/username/myproject.git

Pushing Local Changes: git push -u origin main



ðŸ”¹ Branching

What are Branches?
	â€¢	Branch = separate line of development.
	â€¢	main (or master) is the default branch.

â¸»

Use of Branches
	â€¢	Develop features independently without disturbing the main branch.

â¸»

Creating and Switching Branch: git branch feature1
					  git checkout feature1
                                                      (or simply:)       git checkout -b feature1

Merging Branch to Main: git checkout main
				 git merge feature1

Pushing Branches: git push origin feature1



ðŸ”¹ Working with Forks & Collaboration

Why Fork and How to Fork?
	â€¢	Fork = create your own copy of someone elseâ€™s GitHub repo.
	â€¢	Useful when contributing to open source.

â¸»

Cloning a Forked Project: git clone https://github.com/yourusername/forkedproject.git


Upstream
	â€¢	Origin = your fork.
	â€¢	Upstream = the original project repo.
	â€¢	Add upstream: git remote add upstream https://github.com/originalowner/project.git



Pull Request (PR)
	â€¢	A PR asks the original repo owner to review and merge your changes.

Steps:
	1.	Fork project.
	2.	Create a branch.
	3.	Commit changes.
	4.	Push branch.
	5.	On GitHub, click New Pull Request.

â¸»

Never Commit on Main
	â€¢	Always create a new branch for changes.
	â€¢	This avoids messy histories.

â¸»

Updating PR (Force Push)

If you need to change commits in a PR: git commit --amend
						    git push origin branch-name --force


Merging a Pull Request
	â€¢	Repo owner can merge PR once reviewed.

â¸»

Keeping Fork Updated: git fetch upstream
			    git merge upstream/main




ðŸ”¹ Advanced Git

Squashing Commits

Combine multiple commits into one: git rebase -i HEAD~3
	â€¢	Change pick to squash for extra commits.
	â€¢	Save â†’ write a clean commit message.

Using Rebase
	â€¢	Rebase = rewrite commit history.
	â€¢	Example: git checkout feature
			   git rebase main

Reset with Hard Flag
	â€¢	Move back and delete changes: git reset --hard HEAD~1



Merge Conflicts
	â€¢	Happen when two branches change the same lines of code.
	â€¢	Git marks conflicts with: <<<<<<< HEAD
							Your changes
								=======
							Other branch changes
								>>>>>>> branchname
	â€¢	Manually edit file, keep correct changes.
	â€¢	Then: git add conflictedfile.txt
			git commit



Additionally Bonus Points:

git diff shows the line-by-line changes between:
	â€¢	Your working directory and the staging area
	â€¢	Or between commits/branches

ðŸ”¹ Common Uses
	1.	See unstaged changes (what you edited but havenâ€™t added yet): git diff
	2.	See staged changes (what you added with git add, waiting to commit): git diff --staged
	3.	Compare two commits: git diff commit1 commit2
	4.	Compare branches: git diff branch1 branch2

ðŸ”¹ Example

Say your file names.txt changed from: kiran, ravi to: kiran, ravi, suresh

git diff would show: @@ -1,2 +1,3 @@
 				kiran
 				ravi
				+suresh
Here:
	â€¢	+suresh â†’ line was added
	â€¢	A minus (-) would mean a removed line





